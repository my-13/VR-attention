using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;

namespace UniGLTF
{
    /// <summary>
    /// Material information generated by IMaterialDescriptorGenerator
    /// In recent versions, it is easy to manipulate Materials directly using Actions.
    /// 
    /// Actions の使用例は UniGLTF.UrpGltfMaterialDescriptorGenerator を参照
    /// </summary>
    public sealed class MaterialDescriptor
    {
        public delegate Task MaterialGenerateAsyncFunc(Material m, GetTextureAsyncFunc getTexture, IAwaitCaller awaitCaller);

        /// <summary>
        /// <code>
        /// material.name = matDesc.SubAssetKey.Name;
        /// </code>
        /// </summary>
        public readonly string Name;

        /// <summary>
        /// <code>
        /// material = new Material(matDesc.Shader);
        /// </code>
        /// </summary>
        public readonly Shader Shader;

        /// <summary>
        /// <code>
        /// material.renderQueue = matDesc.RenderQueue.Value;
        /// </code>
        /// </summary>
        public readonly int? RenderQueue;

        public readonly IReadOnlyDictionary<string, TextureDescriptor> TextureSlots;

        /// <summary>
        /// <code>
        /// foreach (var kv in matDesc.FloatValues)
        /// {
        ///     material.SetFloat(kv.Key, kv.Value);
        /// }        
        /// </code>
        /// </summary>
        public readonly IReadOnlyDictionary<string, float> FloatValues;

        /// <summary>
        /// <code>
        /// foreach (var kv in matDesc.Colors)
        /// {
        ///     material.SetColor(kv.Key, kv.Value);
        /// }
        /// </code>
        /// </summary>
        public readonly IReadOnlyDictionary<string, Color> Colors;

        /// <summary>
        /// <code>
        /// foreach (var kv in matDesc.Vectors)
        /// {
        ///     material.SetVector(kv.Key, kv.Value);
        /// }
        /// </code>
        /// </summary>
        public readonly IReadOnlyDictionary<string, Vector4> Vectors;

        /// <summary>
        /// Process and construct the argument Material
        /// <code>
        /// material.SetTexture(prop, texture);
        /// material.SetColor(prop, color);
        /// </code>
        /// </summary>
        public readonly IReadOnlyList<Action<Material>> Actions;

        /// <summary>
        /// New api. for new code, this is a convenience.
        /// MaterialGenerateAsyncFunc has full access to material and can get all textures.
        /// </summary>
        public readonly IReadOnlyList<MaterialGenerateAsyncFunc> AsyncActions;

        public SubAssetKey SubAssetKey => new SubAssetKey(SubAssetKey.MaterialType, Name);

        public MaterialDescriptor(
            string name,
            Shader shader,
            int? renderQueue,
            IReadOnlyDictionary<string, TextureDescriptor> textureSlots,
            IReadOnlyDictionary<string, float> floatValues,
            IReadOnlyDictionary<string, Color> colors,
            IReadOnlyDictionary<string, Vector4> vectors,
            IReadOnlyList<Action<Material>> actions,
            IReadOnlyList<MaterialGenerateAsyncFunc> asyncActions = null)
        {
            Name = name;
            Shader = shader;
            RenderQueue = renderQueue;
            TextureSlots = textureSlots;
            FloatValues = floatValues;
            Colors = colors;
            Vectors = vectors;
            Actions = actions;
            AsyncActions = asyncActions ?? new List<MaterialGenerateAsyncFunc>();
        }

        public MaterialDescriptor(
            string name,
            Shader shader,
            IReadOnlyList<MaterialGenerateAsyncFunc> asyncActions)
        {
            Name = name;
            Shader = shader;
            RenderQueue = default;
            TextureSlots = new Dictionary<string, TextureDescriptor>();
            FloatValues = new Dictionary<string, float>();
            Colors = new Dictionary<string, Color>();
            Vectors = new Dictionary<string, Vector4>();
            Actions = new List<Action<Material>>();
            AsyncActions = asyncActions;
        }
    }
}